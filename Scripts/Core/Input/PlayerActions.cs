//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input_Actions/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace FrigidBlackwaters.Core
{
    public partial class @PlayerActions : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerActions()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""540cba8a-4107-4de8-b407-7508d0d24071"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""e65fc6d4-fd33-437c-bdf4-5efa7c73d039"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Dock"",
                    ""type"": ""Button"",
                    ""id"": ""124a9ab5-513a-4e0b-aecc-60299eecab88"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""065c5e20-9adb-4e26-9f6c-ed5809cdca3b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Dash"",
                    ""type"": ""Button"",
                    ""id"": ""e0a15c81-1292-4646-9bfe-83fa35580901"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Value"",
                    ""id"": ""d7966ea0-ef34-44b6-a7dd-aef7704ff48e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Equip First"",
                    ""type"": ""Button"",
                    ""id"": ""f6e7c402-b990-4a5f-9607-f9ab64c900da"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip Second"",
                    ""type"": ""Button"",
                    ""id"": ""a40e84c7-a264-4954-a1dc-f72a38c52797"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Equip Third"",
                    ""type"": ""Button"",
                    ""id"": ""99b3ac8f-b7e2-4481-bfef-693132c582e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8713069c-74db-4151-8a51-6bd374b24344"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b3dbf617-15b9-46cf-a64b-ed74b2eb16f3"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Dock"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD Keys"",
                    ""id"": ""d3158790-1ad8-4bd1-b0dd-471db336853d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4c2f196b-4773-4f9b-882f-4452d8cc4f03"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""558e1ae0-8a96-4591-a29e-690c195b0e46"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2fd9b437-9f6a-40b0-aebd-10b97e04f498"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""b09783fd-ccf2-4c88-b3db-112e9a9426fd"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""82c5d9b4-ed49-44e6-aa61-2bd87faf6857"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Dash"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""845c6141-0376-442c-89a6-e3c4f0fe4820"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2b2e287-1aff-4401-ade3-80f8a9a9f938"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Equip First"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a054082d-c513-4d63-b063-447d4a2b8c42"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Equip Second"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""85289b2a-a23c-4f69-8772-3cc816f2bd5a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Equip Third"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interface"",
            ""id"": ""17d95202-3201-4094-b5e9-99ab4f8e901c"",
            ""actions"": [
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""61fb887a-48f4-4f84-95c5-0c28e7160ef3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LeftClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c5349933-7f73-4d64-a01b-061632b16339"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""RightClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""0333164f-ab6f-4823-b041-9bd2f2ed9817"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MiddleClick"",
                    ""type"": ""PassThrough"",
                    ""id"": ""c3e31349-b26a-4e9a-9c56-2ff3e7568d1a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll"",
                    ""type"": ""PassThrough"",
                    ""id"": ""05ea4742-a018-40db-8382-cd4c46139e0c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""7621691f-9d3c-41bb-a430-7d2cd03c5e4b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Access"",
                    ""type"": ""Button"",
                    ""id"": ""dd9b3923-d9da-45e7-9c45-51070f824cea"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Return"",
                    ""type"": ""Button"",
                    ""id"": ""65bb15ee-68f3-4e3b-93e6-238d7988c76e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Expand"",
                    ""type"": ""Button"",
                    ""id"": ""8b9d8707-dea3-403d-8416-6ef15131a9fb"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Quick"",
                    ""type"": ""Button"",
                    ""id"": ""77a8ba4b-9bf5-48fc-862f-22367b416018"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""8655a044-a85e-41b5-bf4a-74faa15d34f2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c528639-d8a4-4d59-8407-da21da8a9e64"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""LeftClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fbb8f42c-ffe5-4b4e-9a10-ddbc2f83773e"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""RightClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa36bf16-8336-4b98-86d5-91b326f579c0"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""MiddleClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa5de881-d4fd-4574-8cbb-b9d5ef114584"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6e99477e-70d9-4636-8918-17e893f9b218"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""3f644e06-f427-4217-9151-bd27ab7de64c"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""4876d77f-ea00-4f09-80f7-fe9d8f597819"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7ddaad80-959a-41b4-83ac-68d3cc97dda2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4b0fe1f8-af08-40c9-a128-0ddbfc671c30"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0857362c-2733-4ee0-bcb2-8033033e9116"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""9125a62f-55fe-489e-a6d8-7bfbb4cb3202"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Access"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fd2cbdec-7edd-4723-9421-4ffa3b7cee8d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Return"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c6f9093-f9ad-48e3-8131-3b58ba4650b2"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KeyboardMouse"",
                    ""action"": ""Quick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ea7814d9-9871-420a-a811-bc90db2db14c"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Expand"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2da5c461-0765-4321-8113-1930eb79aacd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": []
        }
    ]
}");
            // Character
            m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
            m_Character_Attack = m_Character.FindAction("Attack", throwIfNotFound: true);
            m_Character_Dock = m_Character.FindAction("Dock", throwIfNotFound: true);
            m_Character_Movement = m_Character.FindAction("Movement", throwIfNotFound: true);
            m_Character_Dash = m_Character.FindAction("Dash", throwIfNotFound: true);
            m_Character_Aim = m_Character.FindAction("Aim", throwIfNotFound: true);
            m_Character_EquipFirst = m_Character.FindAction("Equip First", throwIfNotFound: true);
            m_Character_EquipSecond = m_Character.FindAction("Equip Second", throwIfNotFound: true);
            m_Character_EquipThird = m_Character.FindAction("Equip Third", throwIfNotFound: true);
            // Interface
            m_Interface = asset.FindActionMap("Interface", throwIfNotFound: true);
            m_Interface_Point = m_Interface.FindAction("Point", throwIfNotFound: true);
            m_Interface_LeftClick = m_Interface.FindAction("LeftClick", throwIfNotFound: true);
            m_Interface_RightClick = m_Interface.FindAction("RightClick", throwIfNotFound: true);
            m_Interface_MiddleClick = m_Interface.FindAction("MiddleClick", throwIfNotFound: true);
            m_Interface_Scroll = m_Interface.FindAction("Scroll", throwIfNotFound: true);
            m_Interface_Move = m_Interface.FindAction("Move", throwIfNotFound: true);
            m_Interface_Access = m_Interface.FindAction("Access", throwIfNotFound: true);
            m_Interface_Return = m_Interface.FindAction("Return", throwIfNotFound: true);
            m_Interface_Expand = m_Interface.FindAction("Expand", throwIfNotFound: true);
            m_Interface_Quick = m_Interface.FindAction("Quick", throwIfNotFound: true);
            m_Interface_Interact = m_Interface.FindAction("Interact", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Character
        private readonly InputActionMap m_Character;
        private ICharacterActions m_CharacterActionsCallbackInterface;
        private readonly InputAction m_Character_Attack;
        private readonly InputAction m_Character_Dock;
        private readonly InputAction m_Character_Movement;
        private readonly InputAction m_Character_Dash;
        private readonly InputAction m_Character_Aim;
        private readonly InputAction m_Character_EquipFirst;
        private readonly InputAction m_Character_EquipSecond;
        private readonly InputAction m_Character_EquipThird;
        public struct CharacterActions
        {
            private @PlayerActions m_Wrapper;
            public CharacterActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Attack => m_Wrapper.m_Character_Attack;
            public InputAction @Dock => m_Wrapper.m_Character_Dock;
            public InputAction @Movement => m_Wrapper.m_Character_Movement;
            public InputAction @Dash => m_Wrapper.m_Character_Dash;
            public InputAction @Aim => m_Wrapper.m_Character_Aim;
            public InputAction @EquipFirst => m_Wrapper.m_Character_EquipFirst;
            public InputAction @EquipSecond => m_Wrapper.m_Character_EquipSecond;
            public InputAction @EquipThird => m_Wrapper.m_Character_EquipThird;
            public InputActionMap Get() { return m_Wrapper.m_Character; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
            public void SetCallbacks(ICharacterActions instance)
            {
                if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
                {
                    @Attack.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Attack.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Attack.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAttack;
                    @Dock.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDock;
                    @Dock.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDock;
                    @Dock.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDock;
                    @Movement.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Movement.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovement;
                    @Dash.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Dash.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnDash;
                    @Aim.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                    @Aim.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                    @Aim.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnAim;
                    @EquipFirst.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipFirst;
                    @EquipFirst.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipFirst;
                    @EquipFirst.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipFirst;
                    @EquipSecond.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipSecond;
                    @EquipSecond.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipSecond;
                    @EquipSecond.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipSecond;
                    @EquipThird.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipThird;
                    @EquipThird.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipThird;
                    @EquipThird.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEquipThird;
                }
                m_Wrapper.m_CharacterActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Attack.started += instance.OnAttack;
                    @Attack.performed += instance.OnAttack;
                    @Attack.canceled += instance.OnAttack;
                    @Dock.started += instance.OnDock;
                    @Dock.performed += instance.OnDock;
                    @Dock.canceled += instance.OnDock;
                    @Movement.started += instance.OnMovement;
                    @Movement.performed += instance.OnMovement;
                    @Movement.canceled += instance.OnMovement;
                    @Dash.started += instance.OnDash;
                    @Dash.performed += instance.OnDash;
                    @Dash.canceled += instance.OnDash;
                    @Aim.started += instance.OnAim;
                    @Aim.performed += instance.OnAim;
                    @Aim.canceled += instance.OnAim;
                    @EquipFirst.started += instance.OnEquipFirst;
                    @EquipFirst.performed += instance.OnEquipFirst;
                    @EquipFirst.canceled += instance.OnEquipFirst;
                    @EquipSecond.started += instance.OnEquipSecond;
                    @EquipSecond.performed += instance.OnEquipSecond;
                    @EquipSecond.canceled += instance.OnEquipSecond;
                    @EquipThird.started += instance.OnEquipThird;
                    @EquipThird.performed += instance.OnEquipThird;
                    @EquipThird.canceled += instance.OnEquipThird;
                }
            }
        }
        public CharacterActions @Character => new CharacterActions(this);

        // Interface
        private readonly InputActionMap m_Interface;
        private IInterfaceActions m_InterfaceActionsCallbackInterface;
        private readonly InputAction m_Interface_Point;
        private readonly InputAction m_Interface_LeftClick;
        private readonly InputAction m_Interface_RightClick;
        private readonly InputAction m_Interface_MiddleClick;
        private readonly InputAction m_Interface_Scroll;
        private readonly InputAction m_Interface_Move;
        private readonly InputAction m_Interface_Access;
        private readonly InputAction m_Interface_Return;
        private readonly InputAction m_Interface_Expand;
        private readonly InputAction m_Interface_Quick;
        private readonly InputAction m_Interface_Interact;
        public struct InterfaceActions
        {
            private @PlayerActions m_Wrapper;
            public InterfaceActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
            public InputAction @Point => m_Wrapper.m_Interface_Point;
            public InputAction @LeftClick => m_Wrapper.m_Interface_LeftClick;
            public InputAction @RightClick => m_Wrapper.m_Interface_RightClick;
            public InputAction @MiddleClick => m_Wrapper.m_Interface_MiddleClick;
            public InputAction @Scroll => m_Wrapper.m_Interface_Scroll;
            public InputAction @Move => m_Wrapper.m_Interface_Move;
            public InputAction @Access => m_Wrapper.m_Interface_Access;
            public InputAction @Return => m_Wrapper.m_Interface_Return;
            public InputAction @Expand => m_Wrapper.m_Interface_Expand;
            public InputAction @Quick => m_Wrapper.m_Interface_Quick;
            public InputAction @Interact => m_Wrapper.m_Interface_Interact;
            public InputActionMap Get() { return m_Wrapper.m_Interface; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(InterfaceActions set) { return set.Get(); }
            public void SetCallbacks(IInterfaceActions instance)
            {
                if (m_Wrapper.m_InterfaceActionsCallbackInterface != null)
                {
                    @Point.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnPoint;
                    @Point.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnPoint;
                    @Point.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnPoint;
                    @LeftClick.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnLeftClick;
                    @LeftClick.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnLeftClick;
                    @LeftClick.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnLeftClick;
                    @RightClick.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnRightClick;
                    @RightClick.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnRightClick;
                    @RightClick.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnRightClick;
                    @MiddleClick.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMiddleClick;
                    @MiddleClick.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMiddleClick;
                    @Scroll.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnScroll;
                    @Scroll.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnScroll;
                    @Scroll.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnScroll;
                    @Move.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnMove;
                    @Access.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnAccess;
                    @Access.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnAccess;
                    @Access.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnAccess;
                    @Return.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnReturn;
                    @Return.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnReturn;
                    @Return.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnReturn;
                    @Expand.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnExpand;
                    @Expand.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnExpand;
                    @Expand.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnExpand;
                    @Quick.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnQuick;
                    @Quick.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnQuick;
                    @Quick.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnQuick;
                    @Interact.started -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnInteract;
                    @Interact.performed -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnInteract;
                    @Interact.canceled -= m_Wrapper.m_InterfaceActionsCallbackInterface.OnInteract;
                }
                m_Wrapper.m_InterfaceActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Point.started += instance.OnPoint;
                    @Point.performed += instance.OnPoint;
                    @Point.canceled += instance.OnPoint;
                    @LeftClick.started += instance.OnLeftClick;
                    @LeftClick.performed += instance.OnLeftClick;
                    @LeftClick.canceled += instance.OnLeftClick;
                    @RightClick.started += instance.OnRightClick;
                    @RightClick.performed += instance.OnRightClick;
                    @RightClick.canceled += instance.OnRightClick;
                    @MiddleClick.started += instance.OnMiddleClick;
                    @MiddleClick.performed += instance.OnMiddleClick;
                    @MiddleClick.canceled += instance.OnMiddleClick;
                    @Scroll.started += instance.OnScroll;
                    @Scroll.performed += instance.OnScroll;
                    @Scroll.canceled += instance.OnScroll;
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Access.started += instance.OnAccess;
                    @Access.performed += instance.OnAccess;
                    @Access.canceled += instance.OnAccess;
                    @Return.started += instance.OnReturn;
                    @Return.performed += instance.OnReturn;
                    @Return.canceled += instance.OnReturn;
                    @Expand.started += instance.OnExpand;
                    @Expand.performed += instance.OnExpand;
                    @Expand.canceled += instance.OnExpand;
                    @Quick.started += instance.OnQuick;
                    @Quick.performed += instance.OnQuick;
                    @Quick.canceled += instance.OnQuick;
                    @Interact.started += instance.OnInteract;
                    @Interact.performed += instance.OnInteract;
                    @Interact.canceled += instance.OnInteract;
                }
            }
        }
        public InterfaceActions @Interface => new InterfaceActions(this);
        private int m_KeyboardMouseSchemeIndex = -1;
        public InputControlScheme KeyboardMouseScheme
        {
            get
            {
                if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
                return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
            }
        }
        public interface ICharacterActions
        {
            void OnAttack(InputAction.CallbackContext context);
            void OnDock(InputAction.CallbackContext context);
            void OnMovement(InputAction.CallbackContext context);
            void OnDash(InputAction.CallbackContext context);
            void OnAim(InputAction.CallbackContext context);
            void OnEquipFirst(InputAction.CallbackContext context);
            void OnEquipSecond(InputAction.CallbackContext context);
            void OnEquipThird(InputAction.CallbackContext context);
        }
        public interface IInterfaceActions
        {
            void OnPoint(InputAction.CallbackContext context);
            void OnLeftClick(InputAction.CallbackContext context);
            void OnRightClick(InputAction.CallbackContext context);
            void OnMiddleClick(InputAction.CallbackContext context);
            void OnScroll(InputAction.CallbackContext context);
            void OnMove(InputAction.CallbackContext context);
            void OnAccess(InputAction.CallbackContext context);
            void OnReturn(InputAction.CallbackContext context);
            void OnExpand(InputAction.CallbackContext context);
            void OnQuick(InputAction.CallbackContext context);
            void OnInteract(InputAction.CallbackContext context);
        }
    }
}
